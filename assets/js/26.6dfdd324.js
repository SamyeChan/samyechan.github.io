(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{270:function(a,t,s){"use strict";s.r(t);var e=s(0),r=Object(e.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("div",{staticClass:"content"},[s("h1",{attrs:{id:"ecmascript-数据类型及类型转换"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ecmascript-数据类型及类型转换","aria-hidden":"true"}},[a._v("#")]),a._v(" ECMAScript 数据类型及类型转换")]),a._v(" "),s("ul",[s("li",[a._v("JS 三大核心：\n"),s("ol",[s("li",[a._v("ECMAScript - js的核心语法、数据类型...")]),a._v(" "),s("li",[a._v("DOM - 文档对象模型；")]),a._v(" "),s("li",[a._v("BOM - 浏览器对象模型；")])])])]),a._v(" "),s("h2",{attrs:{id:"数据类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数据类型","aria-hidden":"true"}},[a._v("#")]),a._v(" 数据类型")]),a._v(" "),s("h3",{attrs:{id:"为什么要划分数据类型？"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为什么要划分数据类型？","aria-hidden":"true"}},[a._v("#")]),a._v(" 为什么要划分数据类型？")]),a._v(" "),s("ul",[s("li",[a._v("不同类型的数据会有相关的不同特征及不同的操作方法；")])]),a._v(" "),s("h3",{attrs:{id:"数据类型划分"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数据类型划分","aria-hidden":"true"}},[a._v("#")]),a._v(" 数据类型划分")]),a._v(" "),s("p",[a._v("两大类，7种：")]),a._v(" "),s("ol",[s("li",[a._v("原始类型（基础类型 / 简单类型）- 6种")])]),a._v(" "),s("ul",[s("li",[a._v("Number 数字；")]),a._v(" "),s("li",[a._v("String 字符串 - 在 js 中，一对引号之间 0 到 多个字符串；")]),a._v(" "),s("li",[a._v("Boolean 布尔值 - true / false；")]),a._v(" "),s("li",[a._v("null 空值（空对象）- 不要对空值进行属性操作，会报错；")]),a._v(" "),s("li",[a._v("undefined 未定义；")]),a._v(" "),s("li",[a._v("Symbol （ES6新增）；")])]),a._v(" "),s("ol",{attrs:{start:"2"}},[s("li",[a._v("符合类型（复杂类型）- 1种")])]),a._v(" "),s("ul",[s("li",[a._v("Object 对象：Array 数组，function 函数， element，elements， Object 对象{}\n【ps: json是字符串，不是对象】")])]),a._v(" "),s("h3",{attrs:{id:"typeof-运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#typeof-运算符","aria-hidden":"true"}},[a._v("#")]),a._v(" typeof 运算符")]),a._v(" "),s("ul",[s("li",[a._v("检测数据的类型；")]),a._v(" "),s("li",[a._v("注意，typeof 检测的结果和标准规定略有差异；")])]),a._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 结果为 object，但它不是一个对象")]),a._v("\n")])])]),s("ul",[s("li",[a._v("可检测 7 种：number、string、boolean、function、undefined、symbol、object")])]),a._v(" "),s("h3",{attrs:{id:"数据类型转换"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数据类型转换","aria-hidden":"true"}},[a._v("#")]),a._v(" 数据类型转换")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("把一种类型的数据，转换成另外一种；\n[ 返回值类型：方法名称(参数1[,参数2])； ]")])]),a._v(" "),s("li",[s("p",[a._v("数据转为数字：")]),a._v(" "),s("ol",[s("li",[s("code",[a._v("parseInt(data[,radix])")]),a._v(" - 将数据转换成一个整数（number）")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("参数：data - 要转换或取整的数据\n可选参数：radix - data的进制（是标明转换前是什么进值，而不是设定转换后的进值）；\n返回值：取整之后的结果（不会四舍五入，是直接截取的）；\n")])])]),s("ul",[s("li",[a._v("从左向右一位一位进行转换，若遇到非数字就停止，而后把之前的数字提取出来，转成一个完整的数字；")]),a._v(" "),s("li",[a._v("若从第 0 位开始就不是数字，就会直接返回 NaN（Not A Number）；")]),a._v(" "),s("li",[a._v("0x 是十六进值（0-f）的标识；")]),a._v(" "),s("li",[a._v("若 parseInt 接收的是一个数字类型的数据，就只做取整，不看进制；")]),a._v(" "),s("li",[a._v("若通过 parseInt 转换其他数据（除字符串）类型，会先转换成字符串，然后再执行 parseInt() ；")])]),a._v(" "),s("ol",{attrs:{start:"2"}},[s("li",[s("code",[a._v("parseFloat(data)")]),a._v(" - 将数据转换成浮点数（小数）- 只考虑十进制 / 不考虑从左至右的第二个小数点；")])]),a._v(" "),s("ul",[s("li",[s("p",[a._v("小数不能进行进制转换；")]),a._v(" "),s("h4",{attrs:{id:"在-js-中，小数的计算会有精度问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#在-js-中，小数的计算会有精度问题","aria-hidden":"true"}},[a._v("#")]),a._v(" 在 js 中，小数的计算会有精度问题")]),a._v(" "),s("ol",[s("li",[a._v("数字转换成二进制；")]),a._v(" "),s("li",[a._v("计算；")]),a._v(" "),s("li",[a._v("转回十进制（产生精度问题）；")])])])]),a._v(" "),s("ol",{attrs:{start:"3"}},[s("li",[s("code",[a._v("Number(val)")]),a._v(" - 将数据转换成数字；")])]),a._v(" "),s("ul",[s("li",[a._v("字符串类型，规则如下：\n"),s("ul",[s("li",[a._v("当整段字符串都符合数字规则时，转换为数字返回；")]),a._v(" "),s("li",[a._v("空字符串，直接返回 0；")]),a._v(" "),s("li",[a._v("其余情况，直接返回 NaN（有其中一项不符合就回返回）；")])])]),a._v(" "),s("li",[a._v("布尔值类型，true 返回 1，false 返回 0；")]),a._v(" "),s("li",[a._v("null，返回 0；")]),a._v(" "),s("li",[a._v("undefined，返回 NaN；")]),a._v(" "),s("li",[a._v("对象类型，调用对象的 toString() 方法，再依照前面字符串的转换规则进行转换；")])])])]),a._v(" "),s("h4",{attrs:{id:"nan"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#nan","aria-hidden":"true"}},[a._v("#")]),a._v(" NaN")]),a._v(" "),s("ul",[s("li",[a._v("Number 类型中的一个特殊值；")]),a._v(" "),s("li",[a._v("特殊在它的类型上：NaN 不是一个数字，但其类型是数字（Number）；")]),a._v(" "),s("li",[a._v("js中唯一一个不等于任何值，也不等于自己的东西 - NaN；")]),a._v(" "),s("li",[a._v("检测是不是 NaN：isNaN() - 若可转成合法数字，但回 false / 不能转换为合法数字，返回 true；")])]),a._v(" "),s("h4",{attrs:{id:"boolean"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#boolean","aria-hidden":"true"}},[a._v("#")]),a._v(" Boolean()")]),a._v(" "),s("ul",[s("li",[a._v("数字类型：非零合法数字转换为 true，0 代表 false，NaN 代表 fasle；")]),a._v(" "),s("li",[a._v("字符串类型：非空字符串转换为 true，非空字符串转换为 false；")]),a._v(" "),s("li",[a._v("null：转换为 false；")]),a._v(" "),s("li",[a._v("对象： 转换为 true；")])]),a._v(" "),s("h4",{attrs:{id:"string"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#string","aria-hidden":"true"}},[a._v("#")]),a._v(" String()")]),a._v(" "),s("ul",[s("li",[a._v("转换成字符串；")]),a._v(" "),s("li",[a._v("数字类型：直接转换数据类型原样返回；")]),a._v(" "),s("li",[a._v("undefined：直接返回字符串 undefined；")]),a._v(" "),s("li",[a._v("null：直接返回字符串 null；")]),a._v(" "),s("li",[a._v("布尔值，直接返回字符串 true 或 false；")]),a._v(" "),s("li",[a._v("函数：直接把整个函数变成字符串返回；")]),a._v(" "),s("li",[a._v("对象：直接调用对象的 toString 方法：\n"),s("ul",[s("li",[a._v("{} [object, object]；")]),a._v(" "),s("li",[a._v("元素对象 [object HTML标签名Element]；")]),a._v(" "),s("li",[a._v("[] 去掉方括号后将其中的值转换成字符串；")])])])]),a._v(" "),s("hr"),a._v(" "),s("h3",{attrs:{id:"隐式类型转换"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#隐式类型转换","aria-hidden":"true"}},[a._v("#")]),a._v(" 隐式类型转换")]),a._v(" "),s("ul",[s("li",[a._v("转换过程不受我们强制，js 偷偷自己转换；")])]),a._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("100")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" b "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'100'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("a "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("==")]),a._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// true")]),a._v("\n")])])]),s("h4",{attrs:{id:"看-课-件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#看-课-件","aria-hidden":"true"}},[a._v("#")]),a._v(" 看...课...件...")])])}],!1,null,null,null);t.default=r.exports}}]);
(window.webpackJsonp=window.webpackJsonp||[]).push([[37],{272:function(a,t,r){"use strict";r.r(t);var e=r(0),v=Object(e.a)({},function(){var a=this,t=a.$createElement,r=a._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[r("h1",{attrs:{id:"read-《你不知道的js·上》"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#read-《你不知道的js·上》","aria-hidden":"true"}},[a._v("#")]),a._v(" Read |《你不知道的JS·上》")]),a._v(" "),r("p",[a._v("《你不知道的JavaScript·上卷》")]),a._v(" "),r("h2",{attrs:{id:"_01-作用域和闭包"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_01-作用域和闭包","aria-hidden":"true"}},[a._v("#")]),a._v(" 01 作用域和闭包 "),r("badge",{attrs:{text:"2019.7.1"}})],1),a._v(" "),r("h3",{attrs:{id:"作用域是什么"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#作用域是什么","aria-hidden":"true"}},[a._v("#")]),a._v(" 作用域是什么")]),a._v(" "),r("ul",[r("li",[a._v("编程语言的基本功能之一：存储变量当中的值，并能在往后对这个值进行访问及修改；")]),a._v(" "),r("li",[a._v("需要一套设计良好的规则来存储变量，并往后可方便寻找到它们 → 这套规则：作用域；")])]),a._v(" "),r("h4",{attrs:{id:"编译原理"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#编译原理","aria-hidden":"true"}},[a._v("#")]),a._v(" 编译原理")]),a._v(" "),r("ul",[r("li",[a._v("传统编译的3个步骤：\n"),r("ol",[r("li",[r("code",[a._v("分词/词法分析")]),a._v(" → 将字符串分解成有意义的代码块（"),r("strong",[a._v("词法单元")]),a._v("）；")])]),a._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v("  分词(tokenizing)和词法分析(Lexing)之间的区别是非常微妙、晦涩的,\n主要差异在于词法单元的识别是通过 有状态 还是 无状态 的方式进行的。简\n单来说,如果词法单元生成器在判断 a 是一个独立的词法单元还是其他词法\n单元的一部分时,调用的是有状态的解析规则,那么这个过程就被称为 词法\n分析 。\n")])])]),r("ol",{attrs:{start:"2"}},[r("li",[r("code",[a._v("解析/语法分析")]),a._v(" → 将词法单元流（数组）转换成一个由元素逐级嵌套组成的树（"),r("strong",[a._v("抽象语法树")]),a._v("，AST），其代表了程序语法结构；")]),a._v(" "),r("li",[r("code",[a._v("代码生成")]),a._v(" → 将 AST 转换为可执行代码的过程")])])]),a._v(" "),r("li",[a._v("JavaScript 引擎不会有大量的时间来进行优化；")]),a._v(" "),r("li",[a._v("JavaScript 的编译过程不发生于构建之前；")]),a._v(" "),r("li",[a._v("大部分情况，JavaScript 的编译会发生在代码执行前几微秒；")]),a._v(" "),r("li",[r("strong",[a._v("任何 JavaScript 代码片段在执行前都要进行编译(通常就在执行前)；")])])]),a._v(" "),r("h3",{attrs:{id:"理解作用域"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#理解作用域","aria-hidden":"true"}},[a._v("#")]),a._v(" 理解作用域")]),a._v(" "),r("ul",[r("li",[r("code",[a._v("引擎")]),a._v(" - 从头到尾负责整个 JavaScript 程序的编译及执行过程；")]),a._v(" "),r("li",[r("code",[a._v("编译器")]),a._v(" - 负责语法分析及代码生成；")]),a._v(" "),r("li",[r("code",[a._v("作用域")]),a._v(" - 负责收集并维护所有声明的标识符（变量）组成的一系列查询，并实施一套非常严格的规则，确定当前执行的代码对这些标识符的访问权限；")]),a._v(" "),r("li",[a._v("变量的赋值操作会执行两个动作：\n"),r("ol",[r("li",[a._v("首先编译器会在当前作用域中声明一个变量（若未声明过);")]),a._v(" "),r("li",[a._v("然后在运行时引擎会在作用域中查找该变量，若能找到就会对它赋值;")])])])]),a._v(" "),r("h3",{attrs:{id:"lhs-和-rhs"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#lhs-和-rhs","aria-hidden":"true"}},[a._v("#")]),a._v(" LHS 和 RHS")]),a._v(" "),r("ul",[r("li",[a._v("当变量出现在 "),r("strong",[a._v("赋值操作")]),a._v(" 的左侧时进行 "),r("code",[a._v("LHS")]),a._v(" 查询，出现在右侧（准确说是“非左侧”）时进行 "),r("code",[a._v("RHS")]),a._v(" 查询；")]),a._v(" "),r("li",[r("code",[a._v("LHS")]),a._v(" 查询试图找到变量的容器本身，从而可对其赋值；")]),a._v(" "),r("li",[r("code",[a._v("RHS")]),a._v(" 查询与简单查找某个变量的值别无二致 → Retrieve His Source value，取到其源值；")])]),a._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v("赋值操作其实有多种形式，故准确而言，应进行如下理解：\n\n1- LHS：赋值操作的目标是谁；\n2- RHS：谁是赋值操作的源头；\n")])])]),r("ul",[r("li",[a._v("编译器可以在代码生成的同时处理声明和值的定义；")])]),a._v(" "),r("h4",{attrs:{id:"测验"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#测验","aria-hidden":"true"}},[a._v("#")]),a._v(" 测验")]),a._v(" "),r("div",{staticClass:"language-js extra-class"},[r("pre",{pre:!0,attrs:{class:"language-js"}},[r("code",[r("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 把自己当作引擎，并同作用域进行一次“对话”：")]),a._v("\n"),r("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("function")]),a._v(" "),r("span",{pre:!0,attrs:{class:"token function"}},[a._v("foo")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),r("span",{pre:!0,attrs:{class:"token parameter"}},[a._v("a")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n"),r("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" b "),r("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" a"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),r("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" a "),r("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" b"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),r("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" c "),r("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),r("span",{pre:!0,attrs:{class:"token function"}},[a._v("foo")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n"),r("span",{pre:!0,attrs:{class:"token comment"}},[a._v("/**\n * 1. 找到其中所有的 LHS 查询。(这里有 3 处!)\n * 2. 找到其中所有的 RHS 查询。(这里有 4 处!)\n * /\n \n ![测验](./imgs/)\n")])])])]),r("h3",{attrs:{id:"作用域嵌套"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#作用域嵌套","aria-hidden":"true"}},[a._v("#")]),a._v(" 作用域嵌套")]),a._v(" "),r("ul",[r("li",[a._v("作用域是根据查找变量的一套规则；")]),a._v(" "),r("li",[a._v("实际情况下，通常需要同时去顾及几个作用域；")]),a._v(" "),r("li",[r("strong",[a._v("作用域的嵌套")]),a._v(" → 当一个块嵌套在另一个块或函数中发生；")]),a._v(" "),r("li",[a._v("引擎若在当前作用域中无法找到某个变量时，它就会向外（外层嵌套的作用域）继续查找，直到找到该变量，甚至会抵达最外层作用域（全局作用域）为止；")])]),a._v(" "),r("h4",{attrs:{id:"遍历嵌套作用域链的规则"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#遍历嵌套作用域链的规则","aria-hidden":"true"}},[a._v("#")]),a._v(" 遍历嵌套作用域链的规则")]),a._v(" "),r("ol",[r("li",[a._v("引擎从当前的执行作用域开始查找变量；")]),a._v(" "),r("li",[a._v("若找不到，就向上一级继续查找；")]),a._v(" "),r("li",[a._v("当抵达最外层全局作用域时，无论找到与否，查找过程都会停止；")])]),a._v(" "),r("h3",{attrs:{id:"异常"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#异常","aria-hidden":"true"}},[a._v("#")]),a._v(" 异常")]),a._v(" "),r("h4",{attrs:{id:"为啥要区分-lhs-和-rhs？"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#为啥要区分-lhs-和-rhs？","aria-hidden":"true"}},[a._v("#")]),a._v(" 为啥要区分 LHS 和 RHS？")]),a._v(" "),r("p",[a._v("因为在变量还没有声明，即在任何作用域中都无法找到该变量时，这两种查询的行为时不一样的；")]),a._v(" "),r("p",[r("strong",[a._v("一个未声明的变量在任何相关的作用域中都无法找到它。")])]),a._v(" "),r("h4",{attrs:{id:"referenceerror-异常"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#referenceerror-异常","aria-hidden":"true"}},[a._v("#")]),a._v(" ReferenceError 异常")]),a._v(" "),r("ul",[r("li",[a._v("当 RHS 查询在所有嵌套的作用域中遍寻不到所需的变量，引擎就会抛出 "),r("code",[a._v("ReferenceError异常")]),a._v(" → 十分重要的异常类型；")]),a._v(" "),r("li",[a._v("当 LHS 查询在顶层（全局作用域）中也无法找到目标变量，全局作用域就会创建一个具有该名称的变量，并将其返回引擎（前提是程序运行在 “非严格模式” 下）；")])]),a._v(" "),r("h5",{attrs:{id:"严格模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#严格模式","aria-hidden":"true"}},[a._v("#")]),a._v(" 严格模式")]),a._v(" "),r("ul",[r("li",[a._v("ES5 中引入了严格模式；")]),a._v(" "),r("li",[a._v("同宽松/懒惰模式相比，严格模式在行为上有很多不同；")]),a._v(" "),r("li",[a._v("其一：严格模式禁止自动或隐式地创建全局变量 → 在严格模式下 LHS 查询失败时，并不会创建或返回一个全局变量，引擎会抛出类似的 "),r("code",[a._v("ReferenceError异常")]),a._v("；")]),a._v(" "),r("li",[a._v("RHS 查询找到一个变量，但却对其值进行了不合理的操作（如，试图对一个非函数类型值进行函数调用，或引用 null 或 undefined 类型值中的属性），引擎抛出另一种异常类型 "),r("code",[a._v("TypeError")]),a._v("；")]),a._v(" "),r("li",[r("code",[a._v("ReferenceError")]),a._v(" 同作用域判别失败相关，而 "),r("code",[a._v("TypeError")]),a._v(" 则代表作用域判别成功了,但是对结果的操作是非法或不合理的；")])]),a._v(" "),r("h3",{attrs:{id:"小结"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#小结","aria-hidden":"true"}},[a._v("#")]),a._v(" 小结")]),a._v(" "),r("ul",[r("li",[a._v("作用域是一套规则，用于确定在何处以及如何查找变量(标识符)；")]),a._v(" "),r("li",[a._v("若查找的目的是对变量进行赋值 → LHS 查询；")]),a._v(" "),r("li",[a._v("若目的是获取变量的值 → RHS 查询；")]),a._v(" "),r("li",[a._v("赋值操作符会导致 LHS 查询；")]),a._v(" "),r("li",[r("code",[a._v("=")]),a._v(" 操作符或调用函数时传入参数的操作都会导致关联作用域的赋值操作；")]),a._v(" "),r("li",[a._v("JavaScript 引擎首先会在代码执行前对其进行编译，在这个过程中，像 "),r("code",[a._v("var a = 2")]),a._v(" 这样的声明会被分解成两个独立的步骤：\n"),r("ol",[r("li",[a._v("首先，"),r("code",[a._v("var a")]),a._v(" 在其作用域中声明新变量 → 最开始的阶段，亦即在代码执行前进行；")]),a._v(" "),r("li",[a._v("接下来，"),r("code",[a._v("a = 2")]),a._v(" 会查询（LHS 查询）变量 "),r("code",[a._v("a")]),a._v(" 并对其进行赋值；")])])]),a._v(" "),r("li",[a._v("LHS 和 RHS 查询都会在当前执行作用域中开始，若有需要（也就是说它们没有找到所\n需的标识符），就会向上级作用域继续查找目标标识符，这样每次上升一级作用域(一层\n楼)，最后抵达全局作用域(顶层)，无论找到或没找到都将停止。")]),a._v(" "),r("li",[a._v("不成功的 RHS 引用会导致抛出 ReferenceError 异常；")]),a._v(" "),r("li",[a._v("不成功的 LHS 引用会导致自动隐式地创建一个全局变量：\n"),r("ol",[r("li",[a._v("非严格模式下，该变量使用 LHS 引用的目标作为标识符；")]),a._v(" "),r("li",[a._v("严格模式下，抛出 ReferenceError 异常；")])])])]),a._v(" "),r("h2",{attrs:{id:"_02-词法作用域"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_02-词法作用域","aria-hidden":"true"}},[a._v("#")]),a._v(" 02 词法作用域 "),r("badge",{attrs:{text:"2019.7.1"}})],1)])},[],!1,null,null,null);t.default=v.exports}}]);